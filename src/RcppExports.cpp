// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cumWeightedSum
List cumWeightedSum(IntegerMatrix Index, NumericVector y, IntegerVector multiplicity, IntegerVector data, const int K, const bool self_as_NN);
RcppExport SEXP _causalKNN_cumWeightedSum(SEXP IndexSEXP, SEXP ySEXP, SEXP multiplicitySEXP, SEXP dataSEXP, SEXP KSEXP, SEXP self_as_NNSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type Index(IndexSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type multiplicity(multiplicitySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const bool >::type self_as_NN(self_as_NNSEXP);
    rcpp_result_gen = Rcpp::wrap(cumWeightedSum(Index, y, multiplicity, data, K, self_as_NN));
    return rcpp_result_gen;
END_RCPP
}
// cumWeightedSumStep
List cumWeightedSumStep(IntegerMatrix Index, NumericVector y, IntegerVector multiplicity, IntegerVector data, const int N_steps, const int K_step);
RcppExport SEXP _causalKNN_cumWeightedSumStep(SEXP IndexSEXP, SEXP ySEXP, SEXP multiplicitySEXP, SEXP dataSEXP, SEXP N_stepsSEXP, SEXP K_stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type Index(IndexSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type multiplicity(multiplicitySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const int >::type N_steps(N_stepsSEXP);
    Rcpp::traits::input_parameter< const int >::type K_step(K_stepSEXP);
    rcpp_result_gen = Rcpp::wrap(cumWeightedSumStep(Index, y, multiplicity, data, N_steps, K_step));
    return rcpp_result_gen;
END_RCPP
}
// INV_EXC
arma::mat INV_EXC(arma::mat cov_data, bool supplied);
RcppExport SEXP _causalKNN_INV_EXC(SEXP cov_dataSEXP, SEXP suppliedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type cov_data(cov_dataSEXP);
    Rcpp::traits::input_parameter< bool >::type supplied(suppliedSEXP);
    rcpp_result_gen = Rcpp::wrap(INV_EXC(cov_data, supplied));
    return rcpp_result_gen;
END_RCPP
}
// inner_loop
arma::rowvec inner_loop(arma::mat& matrix_1, arma::mat& matrix_2, int i, int row_num, int threads, arma::mat cov_mat);
RcppExport SEXP _causalKNN_inner_loop(SEXP matrix_1SEXP, SEXP matrix_2SEXP, SEXP iSEXP, SEXP row_numSEXP, SEXP threadsSEXP, SEXP cov_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type matrix_1(matrix_1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type matrix_2(matrix_2SEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type row_num(row_numSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type cov_mat(cov_matSEXP);
    rcpp_result_gen = Rcpp::wrap(inner_loop(matrix_1, matrix_2, i, row_num, threads, cov_mat));
    return rcpp_result_gen;
END_RCPP
}
// train_mat
Rcpp::List train_mat(arma::mat& MATRIX, int k, int threads, arma::mat& COV_MAT);
RcppExport SEXP _causalKNN_train_mat(SEXP MATRIXSEXP, SEXP kSEXP, SEXP threadsSEXP, SEXP COV_MATSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type MATRIX(MATRIXSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type COV_MAT(COV_MATSEXP);
    rcpp_result_gen = Rcpp::wrap(train_mat(MATRIX, k, threads, COV_MAT));
    return rcpp_result_gen;
END_RCPP
}
// test_mat
Rcpp::List test_mat(arma::mat& MATRIX, arma::mat& TEST_DATA, int k, int threads, arma::mat& COV_MAT);
RcppExport SEXP _causalKNN_test_mat(SEXP MATRIXSEXP, SEXP TEST_DATASEXP, SEXP kSEXP, SEXP threadsSEXP, SEXP COV_MATSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type MATRIX(MATRIXSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type TEST_DATA(TEST_DATASEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type COV_MAT(COV_MATSEXP);
    rcpp_result_gen = Rcpp::wrap(test_mat(MATRIX, TEST_DATA, k, threads, COV_MAT));
    return rcpp_result_gen;
END_RCPP
}
// knn_index_dist_rcpp
Rcpp::List knn_index_dist_rcpp(arma::mat& MATRIX, arma::mat& TEST_DATA, int k, int threads, arma::mat& COV_MAT);
RcppExport SEXP _causalKNN_knn_index_dist_rcpp(SEXP MATRIXSEXP, SEXP TEST_DATASEXP, SEXP kSEXP, SEXP threadsSEXP, SEXP COV_MATSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type MATRIX(MATRIXSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type TEST_DATA(TEST_DATASEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type COV_MAT(COV_MATSEXP);
    rcpp_result_gen = Rcpp::wrap(knn_index_dist_rcpp(MATRIX, TEST_DATA, k, threads, COV_MAT));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_causalKNN_cumWeightedSum", (DL_FUNC) &_causalKNN_cumWeightedSum, 6},
    {"_causalKNN_cumWeightedSumStep", (DL_FUNC) &_causalKNN_cumWeightedSumStep, 6},
    {"_causalKNN_INV_EXC", (DL_FUNC) &_causalKNN_INV_EXC, 2},
    {"_causalKNN_inner_loop", (DL_FUNC) &_causalKNN_inner_loop, 6},
    {"_causalKNN_train_mat", (DL_FUNC) &_causalKNN_train_mat, 4},
    {"_causalKNN_test_mat", (DL_FUNC) &_causalKNN_test_mat, 5},
    {"_causalKNN_knn_index_dist_rcpp", (DL_FUNC) &_causalKNN_knn_index_dist_rcpp, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_causalKNN(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
